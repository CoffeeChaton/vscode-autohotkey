; this is a fake ahk...
; Randomly copied from some open code base, and randomly added code until it looks complicated enough
; , as a test file under complex conditions.
; if I have time, I will construct a test case that can run.
Search0() ;-------------------------------------------------------------------------------------------------------------
Search(node, find, return="") { ;---------------------------------------------------------------------------------------
    found := this.xml.SelectNodes(node "[contains(.,'" RegExReplace(find, "&", "')][contains(.,'") "')]") ;-------------
    while, ff := found.item(a_index-1) ;--------------------------------------------------------------------------------
        if (ff.text=find) { ;-------------------------------------------------------------------------------------------
            if return ;-------------------------------------------------------------------------------------------------
                return ff.SelectSingleNode("../" return) ;--------------------------------------------------------------
            return ff.SelectSingleNode("..") ;--------------------------------------------------------------------------
        } ;-------------------------------------------------------------------------------------------------------------
} ;---------------------------------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------------------------------
Search0(i, return := "") { ;--------------------------------------------------------------------------------------------
    while, (ff := foo()) ;----------------------------------------------------------------------------------------------
        if (ff.text=find) { ;-------------------------------------------------------------------------------------------
            if return ;-------------------------------------------------------------------------------------------------
                while, (i := foo2(i)) ;---------------------------------------------------------------------------------
                    if (ff.text=find) { ;-------------------------------------------------------------------------------
                        if return ;-------------------------------------------------------------------------------------
                            MsgBox, % "text" ff.SelectSingleNode("../" return) ;----------------------------------------
                        MsgBox, % "A" ;---------------------------------------------------------------------------------
                        MsgBox, % "B" ;---------------------------------------------------------------------------------
                        MsgBox, % "C" ;---------------------------------------------------------------------------------
                        MsgBox, % "D" ;---------------------------------------------------------------------------------
                    } ;-------------------------------------------------------------------------------------------------
            MsgBox, % "A" ;---------------------------------------------------------------------------------------------
            MsgBox, % "B" ;---------------------------------------------------------------------------------------------
            MsgBox, % "C" ;---------------------------------------------------------------------------------------------
            MsgBox, % "D" ;---------------------------------------------------------------------------------------------
        } ;-------------------------------------------------------------------------------------------------------------
    ;-------------------------------------------------------------------------------------------------------------------
    ;-------------------------------------------------------------------------------------------------------------------
    MsgBox, % "c"  ;----------------------------------------------------------------------------------------------------
    ;-------------------------------------------------------------------------------------------------------------------
}



Search(node, find, returnA="") {  ;-------------------------------------------------------------------------------------
    found := this.xml.SelectNodes(node "[contains(.,'" RegExReplace(find, "&", "')][contains(.,'") "')]") ;-------------
    while, ff := found.item(a_index-1)  ;-------------------------------------------------------------------------------
        if (ff.text=find) {  ;------------------------------------------------------------------------------------------
            if returnA  ;-----------------------------------------------------------------------------------------------
                MsgBox, % "text" ff.SelectSingleNode("../" returnA)  ;--------------------------------------------------
            MsgBox, % "A" ;---------------------------------------------------------------------------------------------
            MsgBox, % "B" ;---------------------------------------------------------------------------------------------
            MsgBox, % "C" ;---------------------------------------------------------------------------------------------
            MsgBox, % "D" ;---------------------------------------------------------------------------------------------
        } ;-------------------------------------------------------------------------------------------------------------
    ;-------------------------------------------------------------------------------------------------------------------
    if (z){ ;-----------------------------------------------------------------------------------------------------------
        MsgBox, % "c" ;-------------------------------------------------------------------------------------------------
    } ;-----------------------------------------------------------------------------------------------------------------
} ;---------------------------------------------------------------------------------------------------------------------

Studio(ico := 0) { ;----------------------------------------------------------------------------------------------------
    global x ;----------------------------------------------------------------------------------------------------------
    if (ico) ;----------------------------------------------------------------------------------------------------------
        Menu, Tray, Icon ;----------------------------------------------------------------------------------------------
    Try ;---------------------------------------------------------------------------------------------------------------
        x := ComObjActive("AHK-Studio") ;-------------------------------------------------------------------------------
    Catch m ;-----------------------------------------------------------------------------------------------------------
        x := ComObjActive("{DBD5A90A-A85C-11E4-B0C7-43449580656B}") ;---------------------------------------------------
    return x, x.autoclose(A_ScriptHwnd) ;-------------------------------------------------------------------------------
    ;-------------------------------------------------------------------------------------------------------------------
} ;---------------------------------------------------------------------------------------------------------------------


fzz(){ ;----------------------------------------------------------------------------------------------------------------
    IfNotExist, %AhkScript% ;-------------------------------------------------------------------------------------------
        if !iOption ;---------------------------------------------------------------------------------------------------
            Util_Error((IsFirstScript ? "Script" : "#include") " file cannot be opened.", 0x32, """" AhkScript """") ;--
    else return ;-------------------------------------------------------------------------------------------------------
    zz := 0 ;-----------------------------------------------------------------------------------------------------------
} ;---------------------------------------------------------------------------------------------------------------------
